SEO -  Tecnicas para mejorar la presencia en la web. Es lo mismo que decir posicionamiento en Google.
    Google indexa con "spyder" que indexan las paginas extrayendo informacion
    Angular universal es que el servidor a parte de tener la version para clientes tiene una version renderizada para entregarsela a la 
    araña de google. Esto depende del servidor, a dia de hoy solo hay un lenguaje capaz de hacerlo: Node

Angular languaje services Desinstalar si va mal la maquina
nvm -> permite obtener versiones mas antiguas de node
Transpilar pasar el lenguaje de alto nivel a otro de alto nivel, de node a javascript, es el proceso de empaquetado de la aplicacion

Crear un nuevo proyecto en Angular:
ng new --routing --prefix bbl base-app

El proyecto creado esta en el repositorio.
Dentro de la aplicacion se pone: "ng serve"

package.json -> dependencias de todo lo que se ha instalado ahi estan los comandos que se usan en ng que puedes modificar para iniciar
de forma personalizada


Import:
Via enlaces simbolicos
from '@angular/platform-browser-dynamic'; ya sabe que lo tiene package.json
los otros imports es pork no estan en el package.json

Via Rutas
import { AppModule } from './app/app.module';

"npm install bootstrap" dentro del proyecto donde este la carpeta de package.json

En angular-cli.json en el array de style se pone el css de bootstrap:
"styles": [
        "styles.css",
        "./node_modules/bootstrap/dist/css/bootstrap.min.css"
      ],
SIEMPRE LOS ESTILOS DE LA LIBRERIA Y LUEGO EL ESTILO PROPIO
Tambien se puede hacer el import de bootstrap directamente en el style.css con el @import arriba del todo
-------------------------------------

Ejecutar el typescript
..\node_modules\.bin\ts-node <nombrefich.ts>

app.module.ts es el que se encarga de arrancar el modulo de bootstrap
bootstrap: [AppComponent]

Generar se usa el comando: "ng g"
    Crear un core: ng generate module core -> no relacciona los modulos entre los que estan ya creados, para enlazarlos hay que importarlo
    desde el modulo principal, se importa en app.module en "Imports":
    imports: [
        BrowserModule,
        AppRoutingModule,
        CoreModule
    ]
para crear un componente "ng g c"
El componente es un objeto html que se tiene que identificar con una etiqueta esa etiqueta esta en <nombrcomponte>.component.js
    @Component({
        selector: 'bbl-cabeza',
        templateUrl: './cabeza.component.html',
        styleUrls: ['./cabeza.component.css']
    })

Para exportar un componente dentro de una carpeta creada "core" en su core.modules.ts hay que poner un exports  
 exports: [
    PieComponent
  ]


Se puede declarar unavariable como un string que es una ruta y se le pone entre corchetes en el [src] en el html y espera
que venga una variable de angular
<img class="img-fluid" alt="Angular Logo" [src]= logo>

Enrutamiento-> carga componentes al dar click en un menu
app-routing.module.ts
Las rutas que usan estane n el array: const routes: Routes = []; dentro de app-routing.module.ts

ng g c inicio/inicio --flat -it-is -> te crea el componente sin carpeta propia, debajo del padre

crear de forma enrutada ng g m catalogo --routing



Pruebas unitarias: ng test
Para cada componente se hace un describe
metodo TestBed -> tiene una funcion configuretestingmodule -> configura un modulo para poder testear un componente 
    hace que el componente en la fase de testing resida en el modulo de mentira

Ficehro spec es el encargado de hacer los test
Crea el componenete instanciando el fixture
beforeEach(() => {
    fixture = TestBed.createComponent(AboutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });



-----------------------
Iterar un array en el html <li class="loquesea" *ngfor="let tarea of sTareas">{{tarea}}</li>
usa el ngfor para crear una variable tarea que itear sobre sTareas.

*ngIf="" evalua una expresion si es true incorpora lo que marcamos en el DOM si es false no lo incorpora aTareas.lenght

Se pueden hacer *ngIf con templates para crear uno o otro*ngIf="aTareas.lenght; then ideasTemplate else vacioTemplate"
<ng-template #ideasTemplate>
<ng-template #vacioTemplate>

Construye sobre la marcha el DOM con lo de *ngIf y *ngfor

<li class="loquesea" *ngfor="let tarea of sTareas; let i = index">{{tarea}}</li> 
Guardas en i el valor de index del array para tener en cuenta la posicion


Lenguajes de templates:
{{ expresion | pipe }}
nuevo
